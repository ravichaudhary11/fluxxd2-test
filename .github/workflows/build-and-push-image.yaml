name: Build and Push Image to ghcr

on:
  push:
    branches:
      - main
    paths:
      - 'application-java/**'

  workflow_dispatch: {}

permissions:
  pull-requests: write
  contents: write
  packages: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      IMG_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate docker image tag
        id: generate-image-tag
        run: echo "IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV && echo $IMAGE_TAG

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMG_NAME }}
          flavor: latest=true
          tags: |
            type=sha,prefix=,suffix=,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: application-java
          push: true
          tags: ghcr.io/${{ env.IMG_NAME }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64,linux/arm64

# new job to modify package and repackage
  re-packaging:
    runs-on: ubuntu-latest
    needs: build-and-push # This job depends on the 'build' job
    if: needs.build-and-push.result == 'success'
    env:
      IMG_NAME: ${{ github.repository }} 
      OCI_REGISTRY: ghcr.io/${{ github.repository_owner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate docker image tag
        id: generate-image-tag
        run: echo "IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV && echo $IMAGE_TAG
      
      - name: Setup ORAS
        uses: oras-project/setup-oras@v1
      
      - name: Authenticate with GitHub Packages
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | oras login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Define registry and artifact
        id: define_artifact
        run: |
          echo "OCI_ARTIFACT_REF=${{ env.OCI_REGISTRY }}/java:latest" >> $GITHUB_ENV
          echo "NEW_OCI_ARTIFACT_REF=${{ env.OCI_REGISTRY }}/java:latest" >> $GITHUB_ENV
      
      - name: Pull and unpack OCI artifact
        run: |
          mkdir -p extracted-artifact
          oras pull ${{ env.OCI_ARTIFACT_REF }} -o .
      
      - name: Modify files inside the artifact
        run: |
          sed -i "s|ghcr.io/ravichaudhary11/fluxxd2-test:.*|ghcr.io/ravichaudhary11/fluxxd2-test:${{ env.IMAGE_TAG }}|g" manifests/java-app/deployment-java.yaml
          cat manifests/java-app/deployment-java.yaml
      
      - name: Repackage and push the new OCI artifact
        run: |
          oras push ${{ env.NEW_OCI_ARTIFACT_REF }} ./manifests:application/vnd.cncf.flux.content.v1.tar+gzip
      
      - name: Verify the new artifact
        run: |
          oras manifest fetch ${{ env.NEW_OCI_ARTIFACT_REF }} --plain-http


 

